# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32H7xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, the necessary changes
# can be made to any of the following sections (see examples below);
# - common settings, which will apply to all builds
# - feature specific settings that can be included per board
# - board specific settings
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e nucleo_h743_reference
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e nucleo_h743_reference -t upload
#    # Clean up build related resources
#    pio run -t clean
#

[platformio]
include_dir = Inc
src_dir = Src

# Common build settings that apply to all environments, see my_machine.h for examples
[common]
build_flags =
  -I .
  -I boards
  # Enable L1 cache and assocatied cache maintenance functions
  -D L1_CACHE_ENABLE=1
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  -Wl,-u,_printf_float
  -Wl,-u,_scanf_float
lib_deps =
  grbl
  boards
  plugins
  #bluetooth
  #keypad
  #laser
  #motors
  #trinamic
  #odometer
  #spindle
lib_extra_dirs =
  .

# Build settings for SD card support, include in board environments as needed
[sdcard]
build_flags =
  -D SDCARD_ENABLE=1
  -I Middlewares/Third_Party/FatFs/src
  -I FATFS/Target
  -I FATFS/App
lib_deps =
  sdcard
  FATFS/App
  FATFS/Target
  Middlewares/Third_Party/FatFs
lib_extra_dirs =

# Build settings for USB serial support, include in board environments as needed
[usb]
build_flags =
  -D USB_SERIAL_CDC=1
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/Target
  -I USB_DEVICE/App
lib_deps =
  USB_DEVICE/App
  USB_DEVICE/Target
  Middlewares/ST/STM32_USB_Device_Library/Class
  Middlewares/ST/STM32_USB_Device_Library/Core
lib_extra_dirs =

# Build settings for H723 USB serial support, include in board environments as needed
# (STM32H723xx does not have a FS USB peripherial, using the HS peripheral in FS mode)
[usb_h723]
build_flags =
  -D USB_SERIAL_CDC=1
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE_H723/Target
  -I USB_DEVICE_H723/App
lib_deps =
  USB_DEVICE_H723/App
  USB_DEVICE_H723/Target
  Middlewares/ST/STM32_USB_Device_Library/Class
  Middlewares/ST/STM32_USB_Device_Library/Core
lib_extra_dirs =

# Common build settings for networking support
[common_networking]
build_flags =
  -D ETHERNET_ENABLE=1
  -D TCP_ECHOSERVER_ENABLE=1
  -D TELNET_ENABLE=1
  -D WEBSOCKET_ENABLE=1
  -D MDNS_ENABLE=1
  # FTP & HTTP require SD card support
  -D FTP_ENABLE=1
  -D HTTP_ENABLE=1
  -D WEBDAV_ENABLE=1
  # Websockets moved to port 81 for WebUI
  -D WEBUI_ENABLE=1
  -D NETWORK_WEBSOCKET_PORT=81

  -D TCP_MSS=1460
  -D TCP_SND_BUF=5840   #(4*TCP_MSS)
  -D MEM_SIZE=28672     #(28*1024)
  -D LWIP_NUM_NETIF_CLIENT_DATA=2
  -D LWIP_IGMP=1
  -D LWIP_MDNS=1
  -D LWIP_MDNS_RESPONDER=1
  -D MDNS_MAX_SERVICES=8
  -D LWIP_HTTPD_CUSTOM_FILES=0
  -D LWIP_HTTPD_DYNAMIC_HEADERS=1
  -D LWIP_HTTPD_DYNAMIC_FILE_READ=1
  -D LWIP_HTTPD_SUPPORT_V09=0
  -D LWIP_HTTPD_SUPPORT_11_KEEPALIVE=1
  -D LWIP_HTTPD_SUPPORT_POST=1
  -D HTTPD_LIMIT_SENDING_TO_2MSS=0

# Build settings for onboard Ethernet support, include in board environments as needed
[eth]
build_flags =
   ${common_networking.build_flags}
  -I LWIP/App
  -I LWIP/Target
  -I Middlewares/Third_Party/LwIP/src/include
  -I Middlewares/Third_Party/LwIP/system
  -I Drivers/BSP/Components/lan8742
  -I Middlewares/Third_Party/LwIP/src/include/netif
  -I Middlewares/Third_Party/LwIP/src/include/lwip
lib_deps =
   LWIP/App
   LWIP/Target
   networking
   webui
   Middlewares/Third_Party/LwIP
   Drivers/BSP/Components/lan8742
lib_extra_dirs =

# Build settings for WIZnet Ethernet support, include in board environments as needed
[wiznet]
build_flags =
  ${common_networking.build_flags}
  -I networking/wiznet
  -I Middlewares/Third_Party/LwIP/system
  -I Middlewares/Third_Party/LwIP/src/include
  -I Middlewares/Third_Party/LwIP/src/include/netif
  -I Middlewares/Third_Party/LwIP/src/include/lwip
lib_deps =
   networking
   webui
   Middlewares/Third_Party/LwIP
lib_extra_dirs =

# Note: The platformio package registry does not yet include framework-stm32cubeh7@v1.10, which introduced
#       the rewritten ST ethernet driver. We are therefore using a custom location for the framework, cloned
#       from the official ST repo at https://github.com/STMicroelectronics/STM32CubeH7, with only minimal
#       changes to remove unneeded content & add a package.json file.
[env]
platform = ststm32
platform_packages = framework-stm32cubeh7 @ https://github.com/dresco/STM32CubeH7.git
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

# Configure BTT Octopus Pro v1.1 (H723) for https://github.com/xy-kasumi/Spark
[env:btt_octopus_pro_h723_tmc2209_spark]
board = generic_stm32h723ze
board_build.ldscript = STM32H723ZETX_FLASH.ld
build_flags = ${common.build_flags}
              ${usb_h723.build_flags}
  -D IOPORTS_KEEP_DEPRECATED=1
  -D SPINDLE0_ENABLE=0
  # No need for curved G-codes or tapping etc.
  # -D GCODE_ADVANCED=0 # overridden by another macro, no effect
  # dicer won't use NGC parameters
  -D NGC_PARAMETERS_ENABLE=0
  -D USB_SERIAL_CDC=0
  -D SERIAL_STREAM=1
  -D BOARD_BTT_OCTOPUS_PRO
  -D HSE_VALUE=25000000
  -D PROBE_ENABLE=0
#  -D N_AXIS=7
  -D TRINAMIC_ENABLE=2209
  -D TRINAMIC_R_SENSE=110
  -D TRINAMIC_UART_ENABLE=1
  -D ENABLE_EEPROM=0
  -D ESTOP_ENABLE=0
  -D EDM_ENABLE=1
lib_deps = ${common.lib_deps}
           ${usb_h723.lib_deps}
           motors
           trinamic
#           eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
                 ${usb_h723.lib_extra_dirs}
upload_protocol = cmsis-dap
